@page "/"
@using BlazorCanvasDemo.Models
@using Excubo.Blazor.Canvas
@rendermode InteractiveServer
@inject IJSRuntime JS

<div style="height: 99vh; margin: 0; padding: 0;">
    <div style="height: 5%;">
        <div>Selected image: @(_selectedImage is null ? "None" : _selectedImage.Source)</div>
    </div>
    <div style="height: 95%;">
        <Canvas id="@_canvasId" @ref="_canvas" Width="@_width" Height="@_height" @onclick="OnClick" style="height: 100%; max-height: 100%; max-width: 100%; object-fit: contain" />
    </div>
</div>

<div hidden>
    @foreach (var image in _images)
    {
        <img id="@image.ElementId" src="@image.Source" />
    }
</div>

@code{
    private Canvas _canvas;
    private int _count = 0;
    private int _x = 0;
    private int _y = 0;
    private int _width = 300;
    private int _height = 400;

    private List<DraggableImageModel> _images =
    [
    new(){ Source="images/1.jpg", Height=100, Width=100, X = 10, Y = 11, },
    new(){ Source="images/2.jpg", Height=50, Width=50, X = 250, Y = 100, },
    new(){ Source="images/3.jpg", Height=150, Width=150, X = 30, Y = 200, },
    ];

    private DraggableImageModel? _selectedImage = null;

    private Excubo.Blazor.Canvas.Contexts.Context2D _context;

    private string _canvasId = "my-canvas";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _context = await _canvas.GetContext2DAsync();
        await RenderImages();
    }

    private async Task DrawRect()
    {
        await using (var batch = _context.CreateBatch())
        {
            await batch.FillAndStrokeStyles.FillStyleAsync("pink");
            await batch.FillRectAsync(_x, _y, 10, 10);
        }

        _x += 15;
        if (_x > _width - 10)
        {
            _x = 0;
            _y += 15;
        }
    }

    private async Task RenderImages()
    {
        await using var batch = _context.CreateBatch();

        await batch.ClearRectAsync(0, 0, _width, _height);

        await batch.FillAndStrokeStyles.FillStyleAsync("slateblue");
        await batch.DrawingRectangles.FillRectAsync(0, 0, _width, _height);

        int i = 0;
        foreach (var image in _images)
        {
            await JS.InvokeVoidAsync("eval", $"image{i} = document.getElementById('{image.ElementId}')");
            await batch.DrawingImages.DrawImageAsync($"image{i}", image.X, image.Y, image.Width, image.Height);
            if (image == _selectedImage)
            {
                await batch.StrokeStyleAsync("red");
                await batch.LineWidthAsync(3);
                await batch.StrokeRectAsync(image.X, image.Y, image.Width, image.Height);
            }
            i++;
        }
    }

    private async Task OnClick(MouseEventArgs e)
    {
        double actualHeight = await JS.InvokeAsync<double>("eval", $"document.getElementById('{_canvasId}').clientHeight");
        double actualWidth = await JS.InvokeAsync<double>("eval", $"document.getElementById('{_canvasId}').clientWidth");

        _selectedImage = null;
        var x = e.OffsetX * _width / actualWidth;
        var y = e.OffsetY * _height / actualHeight;

        foreach (var image in _images)
        {
            if (x >= image.X && x <= image.X + image.Width && y >= image.Y && y <= image.Y + image.Height)
            {
                _selectedImage = image;
                break;
            }
        }

        await RenderImages();
    }
}